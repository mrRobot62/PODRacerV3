/***********************************************************************************************



***********************************************************************************************/

// PODRacer use CooperativeTask mechanism
#include <CoopTaskBase.h>
#include <CoopTask.h>
#include <CoopSemaphore.h>
#include <CoopMutex.h>
#include <BasicCoopTask.h>
#include <assert.h>
#include "global.h"
#include "global_utils.h"

// PODRacer Classes/Stuff
#include "Mixer.h"              // this is not a task; responsible to calculate new writings for receiver, based on all below tasks
#include "Receiver.h"           // this is not a task; responsible for reading/writing SBUS commands
#include "Logger.h"             // this is not a task; our logger class
#include "Blackbox.h"           // this is not a task; responsible to save data (blackbox) on SDCard
#include "WiFiData.h"           // this is not a task; responsible to save data (blackbox) on SDCard
#include "TaskBlink.h"          // task; responsible to generate blink-patterns
#include "TaskOpticalFlow.h"    // task; responsible to calculate new data based on the optical flow sensor
#include "TaskSurface.h"        // task; responsible to calculate new data based on both distance sensors
#include "TaskSteering.h"       // task; responsible to calculate a smooth steering
#include "TaskHover.h"          // task; responsible to calculate the hight of the PODRacer (hovering)

char * _tname = "MAIN";         // used to log MAIN output

//HardwareSerial hsBus1(1);       // used by LIDAR Sensor in TaskSurface
HardwareSerial hsBus2(2);       // used by Receiver for SBUS

SLog logger(&Serial, 115200, LOGLEVEL);   // setup up our serial Logger

// TaskClasses
CoopTask<void>* taskBlink = nullptr;  
CoopTask<void>* taskHover = nullptr;  
CoopTask<void>* taskSurface = nullptr;  
CoopTask<void>* taskOFlow = nullptr;  
CoopTask<void>* taskSteer = nullptr;  

CoopSemaphore taskSema(1,1);
Blackbox bb(&logger, BLACKBOX_CS_PIN);
Receiver receiver(&logger, "RECV", &hsBus2, 16, 17, true);
Mixer mixer(&logger, "MIXER");

char buffer[300];

/***************************************************************/
/*                                                             */
/* all task do have this kind of function. This is a callback. */
/* from CoopTask. Every task need such a callback function     */
/*                                                             */
/* currently only this tasks are available                     */
/*  taskBlink     Blink patterns                               */
/*  taskHover     for hovering                                 */
/*  taskSteering  for steering ()                              */
/*  taskSurface   for measuring distance to survace            */
/*  taskOpticalFlow for measuring an optical flow              */
/*  taskIDLE      for idle task (do nothing exept blinking)    */
/***************************************************************/

/* RUN this callBack function for endless loop this task */
void callbackTaskBlinkPattern() {
  unsigned long lastMillis = millis();
  BlinkPattern *obj = new BlinkPattern(&logger, "BLINK", TASK_BLINK);
  uint8_t blink_pattern = 0;
  obj->begin();
  #if defined(USE_TASK_HOVER)
  for(;;) {
    blink_pattern=0;
    if (receiver.isPreventArming()) {
      blink_pattern = PATTERN_PREVENTARMING;
    } else if (!receiver.isArmed()) {
        blink_pattern = PATTERN_DISARMED;
    }
    obj->update(blink_pattern);
    yield();
  }
  #endif
}

/* RUN this callBack function for endless loop this task */
void callbackTaskHover() {
  unsigned long lastMillis = millis();
  TaskHover *obj = new TaskHover(&logger, "HOVER", TASK_HOVER);
  #if defined(USE_TASK_HOVER)
  for(;;) {


  }
  #endif
}


/* RUN this callBack function for endless loop this task */
void callbackTaskSteering() {
  unsigned long lastMillis = millis();
  TaskSteering *obj = new TaskSteering(&logger, "STEER", TASK_STEERING);
  #if defined(USE_TASK_STEERING)
  for(;;) {


    
  }
  #endif
}

/* RUN this callBack function for endless loop this task */
void callbackTaskOpticalFlow() {
  unsigned long lastMillis = millis();
  TaskOpticalFlow *obj = new TaskOpticalFlow(&logger, "STEER", TASK_OPTICALFLOW);
  #if defined(USE_TASK_OPTICALFLOW)
  for(;;) {


    
  }
  #endif
}

/* RUN this callBack function for endless loop this task */
void callbackTaskSurface() {
  unsigned long lastMillis = millis();
  TaskSurface *obj = new TaskSurface(&logger, "SDIST", TASK_SURFACEDISTANCE);
  #if defined(USE_TASK_SURFACE)
  for(;;) {

    yield();
  }
#endif
}



void setup() {
  while (!Serial);
  delay(100);
  #if !defined(ESP32)
    Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    Serial.println("not running on ESP32 device");
    Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    assert(0);
  #endif

  logger.info("setup in progress....", _tname);
  //bb.begin();

  sprintf(buffer, "PODRacer-FWVersion: %s", bb.FWVersioin());
  logger.info(buffer, _tname);

  //taskBlink = new CoopTask<void>(F("BLINK"), callbackTaskBlinkPattern);

  logger.info("all tasks initialized, wakeup tasks...", _tname);
  //if (taskBlink) taskBlink->wakeup();


  logger.info("all tasks running", _tname);

}


void loop() {
  //
  // receiver.read()
  //runCoopTasks(nullptr, nullptr, nullptr);
  // mixer.update()
  // receiver.write()
  //yield();
}